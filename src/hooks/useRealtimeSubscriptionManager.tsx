import { useEffect } from 'react';
import { MessageService } from '@/services/MessageService';

/**
 * Hook para gerenciar subscri√ß√µes de tempo real de forma segura
 * Evita m√∫ltiplas subscri√ß√µes e garante limpeza adequada
 */
export const useRealtimeSubscriptionManager = () => {
  useEffect(() => {
    // Cleanup function para limpar todas as subscri√ß√µes quando o componente for desmontado
    return () => {
      console.log('üßπ [REALTIME_MANAGER] Cleaning up all subscriptions on unmount');
      MessageService.unsubscribeAll();
    };
  }, []);

  // Fun√ß√£o para criar subscri√ß√£o de forma segura
  const createSafeSubscription = (
    channelId: string,
    callback: (payload: any) => void,
    channelSuffix: string = ''
  ) => {
    try {
      const messageService = new MessageService(channelId);
      return messageService.createRealtimeSubscription(callback, channelSuffix);
    } catch (error) {
      console.error('‚ùå [REALTIME_MANAGER] Error creating subscription:', error);
      return null;
    }
  };

  // Fun√ß√£o para limpar subscri√ß√£o espec√≠fica
  const cleanupSubscription = (channelSuffix: string, tableName: string) => {
    try {
      MessageService.unsubscribeChannel(channelSuffix, tableName);
    } catch (error) {
      console.error('‚ùå [REALTIME_MANAGER] Error cleaning up subscription:', error);
    }
  };

  // Fun√ß√£o para limpar todas as subscri√ß√µes
  const cleanupAllSubscriptions = () => {
    try {
      MessageService.unsubscribeAll();
    } catch (error) {
      console.error('‚ùå [REALTIME_MANAGER] Error cleaning up all subscriptions:', error);
    }
  };

  return {
    createSafeSubscription,
    cleanupSubscription,
    cleanupAllSubscriptions
  };
};

