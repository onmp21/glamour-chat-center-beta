import { supabase } from '../integrations/supabase/client';

export interface EvolutionApiConfig {
  baseUrl: string;
  apiKey: string;
  instanceName: string;
}

export interface QRCodeResponse {
  success: boolean;
  qrCode?: string;
  pairingCode?: string;
  error?: string;
  connected?: boolean;
  message?: string;
}

export interface MessageResponse {
  success: boolean;
  messageId?: string;
  error?: string;
}

export interface InstanceStatus {
  state: 'open' | 'close' | 'connecting' | 'qr';
  qrCode?: string;
}

export interface InstanceInfo {
  instanceName: string;
  status: string;
  serverUrl: string;
  apikey: string;
  owner: string;
  profileName?: string;
  profilePictureUrl?: string;
  integration?: string;
  number?: string;
}

export class EvolutionApiService {
  private config: EvolutionApiConfig;

  constructor(config: EvolutionApiConfig) {
    this.config = config;
  }

  private normalizeInstanceName(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9]/g, '')
      .substring(0, 20);
  }

  // Validar conex√£o com a API Evolution
  async validateApi(): Promise<{ success: boolean; error?: string }> {
    try {
      console.log(`üîç [EVOLUTION_API] Validando API: ${this.config.baseUrl}`);
      
      const response = await fetch(`${this.config.baseUrl}/instance/fetchInstances`, {
        method: 'GET',
        headers: {
          'apikey': this.config.apiKey
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro na valida√ß√£o: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const instances = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] API validada com sucesso. Inst√¢ncias encontradas: ${instances.length}`);
      return { success: true };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao validar API:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  // Listar todas as inst√¢ncias dispon√≠veis
  async listInstances(): Promise<{ success: boolean; instances?: InstanceInfo[]; error?: string }> {
    try {
      console.log(`üìã [EVOLUTION_API] Listando inst√¢ncias dispon√≠veis`);
      
      const response = await fetch(`${this.config.baseUrl}/instance/fetchInstances`, {
        method: 'GET',
        headers: {
          'apikey': this.config.apiKey
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao listar inst√¢ncias: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const rawInstances = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] Inst√¢ncias encontradas (raw):`, rawInstances);
      
      // Mapear para formato padronizado
      const instances: InstanceInfo[] = rawInstances.map((item: any) => ({
        instanceName: item.name || item.instanceName,
        status: item.connectionStatus || item.status || 'unknown',
        serverUrl: this.config.baseUrl,
        apikey: this.config.apiKey,
        owner: item.ownerJid || 'unknown',
        profileName: item.profileName,
        profilePictureUrl: item.profilePicUrl,
        integration: item.integration || 'WHATSAPP-BAILEYS',
        number: item.ownerJid ? item.ownerJid.replace('@s.whatsapp.net', '') : null
      }));
      
      console.log(`‚úÖ [EVOLUTION_API] Inst√¢ncias mapeadas:`, instances);

      return {
        success: true,
        instances
      };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao listar inst√¢ncias:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  // Criar nova inst√¢ncia
  async createInstance(instanceName: string): Promise<{ success: boolean; error?: string }> {
    try {
      const normalizedName = this.normalizeInstanceName(instanceName);
      console.log(`üöÄ [EVOLUTION_API] Criando inst√¢ncia: ${normalizedName} (original: ${instanceName})`);
      
      const response = await fetch(`${this.config.baseUrl}/instance/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': this.config.apiKey
        },
        body: JSON.stringify({
          instanceName: normalizedName,
          qrcode: true,
          integration: 'WHATSAPP-BAILEYS'
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao criar inst√¢ncia: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] Inst√¢ncia criada com sucesso:`, result);
      return { success: true };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao criar inst√¢ncia:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  // Excluir inst√¢ncia
  async deleteInstance(instanceName: string): Promise<{ success: boolean; error?: string }> {
    try {
      const normalizedName = this.normalizeInstanceName(instanceName);
      console.log(`üóëÔ∏è [EVOLUTION_API] Deletando inst√¢ncia: ${normalizedName}`);
      
      const response = await fetch(`${this.config.baseUrl}/instance/delete/${normalizedName}`, {
        method: 'DELETE',
        headers: {
          'apikey': this.config.apiKey
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao deletar inst√¢ncia: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] Inst√¢ncia deletada:`, result);
      return { success: true };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao deletar inst√¢ncia:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  // Configurar WebSocket para inst√¢ncia (substitui webhook)
  async configureWebSocket(instanceName: string): Promise<{ success: boolean; error?: string }> {
    try {
      const normalizedName = this.normalizeInstanceName(instanceName);
      console.log(`üîå [EVOLUTION_API] Configurando WebSocket para: ${normalizedName}`);
      
      const response = await fetch(`${this.config.baseUrl}/websocket/set/${normalizedName}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': this.config.apiKey
        },
        body: JSON.stringify({
          enabled: true,
          events: [
            'MESSAGES_UPSERT',
            'MESSAGES_SET', 
            'CONNECTION_UPDATE',
            'MESSAGES_UPDATE',
            'MESSAGES_DELETE'
          ]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao configurar WebSocket: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] WebSocket configurado:`, result);
      return { success: true };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao configurar WebSocket:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  async instanceExists(): Promise<boolean> {
    try {
      const normalizedName = this.normalizeInstanceName(this.config.instanceName);
      console.log(`üîç [EVOLUTION_API] Verificando se inst√¢ncia existe: ${normalizedName}`);
      
      const response = await fetch(`${this.config.baseUrl}/instance/fetchInstances`, {
        method: 'GET',
        headers: {
          'apikey': this.config.apiKey
        }
      });

      if (!response.ok) {
        console.error(`‚ùå [EVOLUTION_API] Erro ao verificar inst√¢ncias: ${response.status}`);
        return false;
      }

      const instances = await response.json();
      const exists = instances.some((instance: any) => 
        instance.instance.instanceName === normalizedName
      );
      
      console.log(`üìã [EVOLUTION_API] Inst√¢ncia ${normalizedName} ${exists ? 'existe' : 'n√£o existe'}`);
      return exists;
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao verificar inst√¢ncia:', error);
      return false;
    }
  }

  async getQRCode(): Promise<QRCodeResponse> {
    try {
      const normalizedName = this.normalizeInstanceName(this.config.instanceName);
      console.log(`üîç [EVOLUTION_API] Obtendo QR Code para inst√¢ncia: ${normalizedName}`);
      
      // Primeiro verificar o status atual
      const currentStatus = await this.getConnectionStatus();
      if (currentStatus?.state === 'open') {
        console.log(`‚úÖ [EVOLUTION_API] Inst√¢ncia ${normalizedName} j√° conectada`);
        return {
          success: true,
          connected: true,
          message: 'Inst√¢ncia j√° conectada'
        };
      }
      
      // Verificar se a inst√¢ncia existe
      const exists = await this.instanceExists();
      if (!exists) {
        console.log(`üöÄ [EVOLUTION_API] Inst√¢ncia n√£o existe, criando: ${normalizedName}`);
        const createResult = await this.createInstance(normalizedName);
        if (!createResult.success) {
          return { success: false, error: createResult.error };
        }
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
      
      // Tentar conectar e obter QR code
      const response = await fetch(`${this.config.baseUrl}/instance/connect/${normalizedName}`, {
        method: 'GET',
        headers: {
          'apikey': this.config.apiKey
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao obter QR Code: ${response.status} - ${errorText}`);
        
        // Se erro 404, tentar criar inst√¢ncia novamente
        if (response.status === 404) {
          console.log(`üîÑ [EVOLUTION_API] Tentando criar inst√¢ncia novamente: ${normalizedName}`);
          const createResult = await this.createInstance(normalizedName);
          if (createResult.success) {
            await new Promise(resolve => setTimeout(resolve, 3000));
            return this.getQRCode(); // Tentar novamente
          }
        }
        
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] Resposta do QR Code:`, result);
      
      // Tentar diferentes formatos de resposta
      let qrCodeData = null;
      
      console.log(`üîç [EVOLUTION_API] Campos dispon√≠veis na resposta:`, Object.keys(result));
      
      // Verificar todos os poss√≠veis campos de QR code
      const qrFields = ['base64', 'code', 'qrcode', 'qr', 'qrCode'];
      let rawQrData = null;
      
      for (const field of qrFields) {
        if (result[field]) {
          rawQrData = result[field];
          console.log(`üîç [EVOLUTION_API] QR Code encontrado no campo '${field}':`, rawQrData.substring(0, 50) + '...');
          break;
        }
      }
      
      if (rawQrData) {
        // Verificar se j√° √© uma data URL v√°lida
        if (rawQrData.startsWith('data:image/')) {
          qrCodeData = rawQrData;
        } else if (rawQrData.startsWith('data:')) {
          // Se √© data URL mas n√£o especifica imagem, assumir PNG
          qrCodeData = rawQrData.replace('data:', 'data:image/png;base64,');
        } else {
          // Se √© base64 puro, adicionar prefix
          // Limpar poss√≠veis espa√ßos e quebras de linha
          const cleanBase64 = rawQrData.replace(/\s/g, '');
          qrCodeData = `data:image/png;base64,${cleanBase64}`;
        }
        
        console.log(`‚úÖ [EVOLUTION_API] QR Code formatado:`, qrCodeData.substring(0, 100) + '...');
      }
      
      if (qrCodeData) {
        return {
          success: true,
          qrCode: qrCodeData,
          pairingCode: result.pairingCode || result.pairing_code
        };
      } else {
        console.error('‚ùå [EVOLUTION_API] QR Code n√£o encontrado na resposta:', Object.keys(result));
        return { 
          success: false, 
          error: 'QR Code n√£o encontrado na resposta da API. Campos dispon√≠veis: ' + Object.keys(result).join(', ')
        };
      }
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao obter QR Code:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  async getConnectionStatus(): Promise<InstanceStatus | null> {
    try {
      const normalizedName = this.normalizeInstanceName(this.config.instanceName);
      console.log(`üîç [EVOLUTION_API] Verificando status da inst√¢ncia: ${normalizedName}`);
      
      const response = await fetch(`${this.config.baseUrl}/instance/connectionState/${normalizedName}`, {
        method: 'GET',
        headers: {
          'apikey': this.config.apiKey
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao verificar status: ${response.status} - ${errorText}`);
        return { state: 'close' };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] Status da inst√¢ncia:`, result);
      
      return {
        state: result.instance?.state || result.state || 'close',
        qrCode: result.qrCode
      };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao verificar status:', error);
      return { state: 'close' };
    }
  }

  async sendTextMessage(phoneNumber: string, text: string): Promise<MessageResponse> {
    try {
      console.log(`üì§ [EVOLUTION_API] Enviando mensagem de texto para: ${phoneNumber}`);
      
      const formattedNumber = this.formatPhoneNumber(phoneNumber);
      
      const response = await fetch(`${this.config.baseUrl}/message/sendText/${this.config.instanceName}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': this.config.apiKey
        },
        body: JSON.stringify({
          number: formattedNumber,
          text: text,
          delay: 1200
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao enviar mensagem: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] Mensagem enviada:`, result);
      
      return {
        success: true,
        messageId: result.key?.id
      };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao enviar mensagem:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  async sendSticker(phoneNumber: string, stickerBase64: string): Promise<MessageResponse> {
    try {
      console.log(`üì§ [EVOLUTION_API] Enviando sticker para: ${phoneNumber}`);
      
      const formattedNumber = this.formatPhoneNumber(phoneNumber);
      
      const response = await fetch(`${this.config.baseUrl}/message/sendMedia/${this.config.instanceName}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': this.config.apiKey
        },
        body: JSON.stringify({
          number: formattedNumber,
          mediatype: 'sticker',
          media: stickerBase64,
          delay: 1200
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao enviar sticker: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] Sticker enviado:`, result);
      
      return {
        success: true,
        messageId: result.key?.id
      };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao enviar sticker:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  async sendMediaMessage(
    phoneNumber: string, 
    mediaBase64: string, 
    mediaType: 'image' | 'audio' | 'video' | 'document',
    caption?: string,
    fileName?: string
  ): Promise<MessageResponse> {
    try {
      console.log(`üì§ [EVOLUTION_API] Enviando ${mediaType} para: ${phoneNumber}`);
      
      const formattedNumber = this.formatPhoneNumber(phoneNumber);
      
      let endpoint = '';
      let payload: any = {
        number: formattedNumber,
        delay: 1200
      };

      if (mediaType === 'audio') {
        endpoint = `/message/sendWhatsAppAudio/${this.config.instanceName}`;
        payload.audio = mediaBase64;
      } else {
        endpoint = `/message/sendMedia/${this.config.instanceName}`;
        payload.mediatype = mediaType;
        payload.media = mediaBase64;
        if (caption) payload.caption = caption;
        if (fileName) payload.fileName = fileName;
      }

      const response = await fetch(`${this.config.baseUrl}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': this.config.apiKey
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao enviar ${mediaType}: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] ${mediaType} enviado:`, result);
      
      return {
        success: true,
        messageId: result.key?.id
      };
    } catch (error) {
      console.error(`‚ùå [EVOLUTION_API] Erro ao enviar ${mediaType}:`, error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  private formatPhoneNumber(phoneNumber: string): string {
    // Remove todos os caracteres n√£o num√©ricos
    let cleaned = ('' + phoneNumber).replace(/\D/g, '');

    // Verifica se o n√∫mero j√° come√ßa com 55 (c√≥digo do Brasil)
    if (cleaned.startsWith('55')) {
      // Se j√° tem 55, verifica se tem o nono d√≠gito para celular (se for 11 d√≠gitos ap√≥s o 55)
      // E se n√£o for um n√∫mero fixo (que geralmente tem 8 d√≠gitos ap√≥s o 55)
      if (cleaned.length === 13 && ['1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(cleaned[2])) {
        // J√° est√° no formato 55XX9XXXXXXXX
        return cleaned;
      } else if (cleaned.length === 12) {
        // Pode ser um n√∫mero fixo 55XXXXXXXXXX
        return cleaned;
      } else if (cleaned.length === 11 && cleaned.startsWith('55') && !cleaned.startsWith('559')) {
        // Caso de n√∫meros antigos sem o 9¬∫ d√≠gito para DDDs que n√£o eram 11, ou fixos
        // Ex: 55118xxxxxxx -> 551198xxxxxxx (se for celular)
        // Para simplificar, vamos assumir que se n√£o tem 9 e tem 11 d√≠gitos, √© um fixo ou um celular antigo sem o 9
        // A API Evolution geralmente espera o 9 para celulares
        // Se for um DDD que n√£o seja 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 27, 28, 31, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99
        // E o n√∫mero tiver 8 d√≠gitos ap√≥s o DDD, √© um fixo
        // Se tiver 9 d√≠gitos ap√≥s o DDD, √© um celular
        // Para garantir, se for celular e n√£o tiver o 9, adiciona-se
        // Esta l√≥gica pode ser complexa e depender de uma base de dados de DDDs
        // Por simplicidade, se for 11 d√≠gitos e n√£o come√ßar com 559, e for um celular, pode precisar do 9
        // A Evolution API geralmente lida com isso se o n√∫mero for v√°lido.
        return cleaned; // Retorna como est√°, a API deve lidar com isso
      }
    } else if (cleaned.length === 11 && cleaned.startsWith('9', 2)) { // Ex: 11987654321
      return '55' + cleaned;
    } else if (cleaned.length === 10) { // Ex: 1187654321 (fixo ou celular antigo)
      return '55' + cleaned;
    }
    
    // Se n√£o se encaixa nos padr√µes acima, retorna o n√∫mero limpo e a API Evolution deve validar
    return cleaned;
  }

  // Obter QR Code para conectar inst√¢ncia ao WhatsApp
  async getQRCodeForInstance(instanceName: string): Promise<QRCodeResponse> {
    try {
      const normalizedName = this.normalizeInstanceName(instanceName);
      console.log(`üì± [EVOLUTION_API] Obtendo QR Code para inst√¢ncia: ${normalizedName}`);
      
      const response = await fetch(`${this.config.baseUrl}/instance/connect/${normalizedName}`, {
        method: 'GET',
        headers: {
          'apikey': this.config.apiKey
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao obter QR Code: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] QR Code obtido:`, result);
      
      if (result.base64) {
        return {
          success: true,
          qrCode: result.base64
        };
      } else if (result.code) {
        return {
          success: true,
          qrCode: result.code
        };
      } else {
        return {
          success: false,
          error: 'QR Code n√£o encontrado na resposta'
        };
      }
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao obter QR Code:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }

  // Obter status da conex√£o da inst√¢ncia
  async getInstanceStatus(instanceName: string): Promise<{ success: boolean; status?: string; error?: string }> {
    try {
      const normalizedName = this.normalizeInstanceName(instanceName);
      console.log(`üìä [EVOLUTION_API] Obtendo status da inst√¢ncia: ${normalizedName}`);
      
      const response = await fetch(`${this.config.baseUrl}/instance/connectionState/${normalizedName}`, {
        method: 'GET',
        headers: {
          'apikey': this.config.apiKey
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [EVOLUTION_API] Erro ao obter status: ${response.status} - ${errorText}`);
        return { success: false, error: `Erro HTTP ${response.status}: ${errorText}` };
      }

      const result = await response.json();
      console.log(`‚úÖ [EVOLUTION_API] Status obtido:`, result);
      
      return {
        success: true,
        status: result.state || result.status || 'unknown'
      };
    } catch (error) {
      console.error('‚ùå [EVOLUTION_API] Erro ao obter status:', error);
      return { success: false, error: `Erro de conex√£o: ${error}` };
    }
  }
}

// Evolution API Manager class for managing multiple instances
class EvolutionApiManager {
  private instances: Map<string, EvolutionApiService> = new Map();

  addInstance(key: string, config: EvolutionApiConfig): EvolutionApiService {
    const service = new EvolutionApiService(config);
    this.instances.set(key, service);
    return service;
  }

  getInstance(key: string): EvolutionApiService | undefined {
    return this.instances.get(key);
  }

  getInstanceByConfig(config: EvolutionApiConfig): EvolutionApiService {
    const key = `${config.baseUrl}_${config.instanceName}`;
    let instance = this.getInstance(key);
    
    if (!instance) {
      instance = this.addInstance(key, config);
    }
    
    return instance;
  }

  removeInstance(key: string): boolean {
    return this.instances.delete(key);
  }

  getAllInstances(): EvolutionApiService[] {
    return Array.from(this.instances.values());
  }

  clear(): void {
    this.instances.clear();
  }
}

// Export singleton instance
export const evolutionApiManager = new EvolutionApiManager();
