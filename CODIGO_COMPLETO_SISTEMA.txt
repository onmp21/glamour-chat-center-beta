
# GLAMOUR CHAT CENTER - CÓDIGO COMPLETO DO SISTEMA

## DESCRIÇÃO GERAL
Sistema web completo de gestão de atendimento multi-canal para Óticas Villa Glamour, desenvolvido em React com TypeScript, Tailwind CSS e Supabase.

## TECNOLOGIAS PRINCIPAIS
- React 18.3.1
- TypeScript
- Tailwind CSS
- Shadcn/UI
- Radix UI
- Supabase (Backend)
- React Router DOM
- React Query (TanStack)
- Date-fns
- Lucide React (Ícones)

## ESTRUTURA DO PROJETO

### PÁGINAS PRINCIPAIS
1. **Login** (`src/components/LoginForm.tsx`)
   - Autenticação de usuários
   - Validação de credenciais
   - Interface responsiva

2. **Dashboard** (`src/components/Dashboard.tsx`)
   - Visão geral do sistema
   - Estatísticas de conversas
   - Acesso rápido aos canais

3. **Chat Interface** (`src/components/ChatInterface.tsx`)
   - Interface principal de conversas
   - Suporte multi-canal
   - Mensagens em tempo real

4. **Configurações** (`src/components/UnifiedSettings.tsx`)
   - Gestão de usuários
   - Configurações de canais
   - Histórico de auditoria

### CANAIS DE ATENDIMENTO
- **Yelena-AI**: Canal principal com IA
- **Canarana**: Atendimento específico
- **Souto Soares**: Canal regional
- **João Dourado**: Atendimento local
- **América Dourada**: Canal especializado
- **Gerente das Lojas**: Comunicação interna
- **Gerente do Externo**: Gestão externa
- **Pedro**: Canal personalizado

### FUNCIONALIDADES PRINCIPAIS

#### AUTENTICAÇÃO E AUTORIZAÇÃO
- Sistema de login com usuário/senha
- Controle de permissões por função
- Sessões seguras com Supabase Auth

#### GESTÃO DE CONVERSAS
- Visualização de conversas por canal
- Status de mensagens (lida/não lida/em andamento/resolvida)
- Histórico completo de mensagens
- Busca e filtros
- Tempo real via WebSocket

#### SISTEMA DE AUDITORIA
- Log de todas as ações do sistema
- Rastreamento de acessos
- Histórico de alterações
- Relatórios detalhados

#### GESTÃO DE EXAMES MÉDICOS
- Cadastro de exames
- Filtros avançados
- Exportação de dados
- Gráficos e estatísticas

### COMPONENTES PRINCIPAIS

#### LAYOUT E NAVEGAÇÃO
- `MainLayout.tsx`: Layout principal
- `Sidebar.tsx`: Menu lateral
- `MobileNavigation.tsx`: Navegação mobile
- `ChannelsSection.tsx`: Seção de canais

#### CHAT E MENSAGENS
- `ChatArea.tsx`: Área de chat
- `MessageHistory.tsx`: Histórico de mensagens
- `ChatInput.tsx`: Entrada de mensagens
- `ConversationsList.tsx`: Lista de conversas

#### CONFIGURAÇÕES
- `UserManagementSection.tsx`: Gestão de usuários
- `ChannelManagementSection.tsx`: Gestão de canais
- `AuditHistorySection.tsx`: Histórico de auditoria
- `ProfileSection.tsx`: Perfil do usuário

### HOOKS CUSTOMIZADOS
- `useAuth`: Gerenciamento de autenticação
- `useChannels`: Gestão de canais
- `useConversations`: Gestão de conversas
- `useAuditLogs`: Sistema de auditoria
- `usePermissions`: Controle de permissões

### SERVIÇOS
- `AuditService`: Serviço de auditoria
- `ChannelService`: Serviço de canais
- `MessageProcessor`: Processamento de mensagens
- `ConversationService`: Gestão de conversas

### BANCO DE DADOS (SUPABASE)
#### TABELAS PRINCIPAIS
- `users`: Usuários do sistema
- `channels`: Canais de atendimento
- `conversations`: Conversas
- `messages`: Mensagens
- `audit_logs`: Logs de auditoria
- `exams`: Exames médicos

#### TABELAS DE CONVERSAS POR CANAL
- `yelena_ai_conversas`
- `canarana_conversas`
- `souto_soares_conversas`
- `joao_dourado_conversas`
- `america_dourada_conversas`
- `gerente_lojas_conversas`
- `gerente_externo_conversas`
- `pedro_conversas`

### FUNCIONALIDADES ESPECÍFICAS

#### DASHBOARD
- Cards de estatísticas
- Gráficos de conversas
- Visão geral dos canais
- Métricas em tempo real

#### CHAT
- Interface similar ao WhatsApp
- Suporte a emojis
- Upload de arquivos
- Status de leitura
- Notificações em tempo real

#### MOBILE
- Interface responsiva
- Navegação otimizada
- Touch gestures
- Layout adaptativo

#### AUDITORIA
- Log automático de ações
- Filtros por tipo/usuário/data
- Exportação de relatórios
- Rastreamento completo

### SEGURANÇA
- Row Level Security (RLS) no Supabase
- Validação de permissões
- Sanitização de dados
- Criptografia de senhas

### PERFORMANCE
- Lazy loading de componentes
- Otimização de queries
- Cache inteligente
- Paginação de dados

### INTEGRAÇÃO
- Webhook N8N para automações
- API REST via Supabase
- Real-time subscriptions
- Sincronização de dados

### DEPLOYMENT
- Build otimizado com Vite
- Assets comprimidos
- Service Workers
- PWA ready

## ARQUIVOS DE CONFIGURAÇÃO
- `package.json`: Dependências
- `tailwind.config.ts`: Configuração do Tailwind
- `vite.config.ts`: Configuração do Vite
- `tsconfig.json`: Configuração TypeScript

## PRINCIPAIS DEPENDÊNCIAS
```json
{
  "@supabase/supabase-js": "^2.49.8",
  "@tanstack/react-query": "^5.56.2",
  "react": "^18.3.1",
  "react-dom": "^18.3.1",
  "react-router-dom": "^6.26.2",
  "date-fns": "^3.6.0",
  "lucide-react": "^0.462.0",
  "tailwind-merge": "^2.5.2",
  "class-variance-authority": "^0.7.1"
}
```

## ESTRUTURA DE PASTAS
```
src/
├── components/           # Componentes React
│   ├── chat/            # Componentes do chat
│   ├── dashboard/       # Componentes do dashboard
│   ├── settings/        # Componentes de configurações
│   ├── ui/             # Componentes UI base
│   └── layout/         # Componentes de layout
├── hooks/              # Custom hooks
├── services/           # Serviços e APIs
├── contexts/           # Contextos React
├── types/              # Definições TypeScript
├── utils/              # Utilitários
├── styles/             # Estilos CSS
└── pages/              # Páginas principais
```

## FLUXO DE DADOS
1. **Autenticação**: Login → Verificação → Definição de permissões
2. **Navegação**: Sidebar → Seleção de seção → Renderização
3. **Chat**: Canal → Conversas → Mensagens → Tempo real
4. **Auditoria**: Ação → Log → Persistência → Visualização

## RECURSOS AVANÇADOS
- **Tema Escuro/Claro**: Toggle automático
- **Responsividade**: Mobile-first design
- **Acessibilidade**: ARIA labels e navegação por teclado
- **SEO**: Meta tags dinâmicas
- **PWA**: Service Workers e manifest

## MONITORAMENTO
- Console logs detalhados
- Error boundaries
- Performance metrics
- User analytics

## MANUTENÇÃO
- Código modular e reutilizável
- Documentação inline
- Testes unitários preparados
- CI/CD ready

Este sistema representa uma solução completa e robusta para gestão de atendimento multi-canal, com foco em performance, usabilidade e escalabilidade.
